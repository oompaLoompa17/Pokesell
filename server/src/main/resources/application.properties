spring.application.name=Pokésell

# Redis
spring.data.redis.host=${SPRING_DATA_REDIS_HOST}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT}
spring.data.redis.username=${SPRING_DATA_REDIS_USERNAME}
spring.data.redis.password=${SPRING_DATA_REDIS_PASSWORD}
spring.data.redis.database=0
# spring.data.redis.host=localhost
# spring.data.redis.port=6379
# spring.data.redis.database=0
# spring.data.redis.username=
# spring.data.redis.password=


pokemon.api.key=${pokemon.api.key}
pokemon.api.url=https://api.pokemontcg.io/v2/

# use cookies and prevent sth called jsessionid from happening/creating
server.servlet.session.tracking-modes=cookie

# JWT secret key
jwt.secret=${JWT_SECRET}

# mySQL
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.url=${SPRING_DATASOURCE_URL}
# spring.datasource.username= ${MYSQL_USERNAME}
# spring.datasource.password= ${MYSQL_PASSWORD}
# spring.datasource.url= jdbc:mysql://127.0.0.1:3306/pokemon

# Enabling multipart/form-data
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=200MB
spring.servlet.multipart.file-size-threshold=1MB

# Ximilar
ximilar.api.token=${ximilar.api.token}

# Stripe
stripe.secret.key=${stripe.secret.key}

# Configuring HTTPS
# server.port=8443
# server.ssl.key-store=classpath:keystore.p12
# server.ssl.key-store-password=yourpassword
# server.ssl.keyStoreType=PKCS12
# server.ssl.keyAlias=tomcat
server.port=${PORT:80}  
# Fallback to 80 if PORT isn’t set

# Google Sheets
spring.security.oauth2.client.registration.google.client-id=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI}
# spring.security.oauth2.client.registration.google.redirect-uri=https://localhost:8443/api/marketplace/export-sold-callback
spring.security.oauth2.client.registration.google.scope=https://www.googleapis.com/auth/spreadsheets

# OAuth2
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# logging
logging.level.root=INFO
logging.level.com.example.Pokemon_TCG_TEST=DEBUG
logging.level.org.springframework.security=TRACE
logging.level.com.example.Pokemon_TCG_TEST.Utilities.JwtFilter=TRACE

# timezone
spring.jackson.time-zone=Asia/Singapore
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Singapore

# custom domain url
app.frontend.url=${app.frontend.url}

# tells Spring Boot to trust X-Forwarded-* headers (e.g., X-Forwarded-Proto) from Railway’s proxy.
server.forward-headers-strategy=native